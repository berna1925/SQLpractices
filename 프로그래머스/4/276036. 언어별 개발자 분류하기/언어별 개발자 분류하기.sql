# SELECT
# CASE WHEN
# (D.SKILL_CODE & 16 > 0) OR (D.SKILL_CODE & 2048 > 0) OR (D.SKILL_CODE & 8192 > 0)
# AND D.SKILL_CODE & 256 > 0
# THEN 'A'

# CASE WHEN D.SKILL_CODE & 1024 > 0
# THEN 'B'

# CASE ELSE 'C' END AS GRADE, ID, EMAIL
# FROM DEVELOPERS

WITH FRONTEND_CODE AS (
    SELECT SUM(CODE) AS CODE 
    FROM SKILLCODES 
    WHERE CATEGORY = 'Front End'
), 
# 비트 연산을 할 때는 SUM()을 하면 1이 있는 자리수가 모두 더해지므로 어떤 항목이 들어가 있는지 확인할 수 있다
    
PYTHON_CODE AS (
    SELECT CODE 
    FROM SKILLCODES 
    WHERE NAME = 'Python'
),
CSHARP_CODE AS (
    SELECT CODE 
    FROM SKILLCODES 
    WHERE NAME = 'C#'
)
# WITH문은 WITH ~ AS (), ~ AS (), ~ AS() 식으로 병렬 구조로 작성이 가능하다!

SELECT 
    CASE 
        WHEN d.SKILL_CODE & f.CODE > 0 AND d.SKILL_CODE & p.CODE > 0 THEN 'A'
        WHEN d.SKILL_CODE & c.CODE > 0 THEN 'B'
        WHEN d.SKILL_CODE & f.CODE > 0 THEN 'C'
    END AS GRADE,
    d.ID,
    d.EMAIL
FROM DEVELOPERS d
JOIN FRONTEND_CODE f ON 1=1
JOIN PYTHON_CODE p ON 1=1
JOIN CSHARP_CODE c ON 1=1
WHERE 
    (d.SKILL_CODE & f.CODE > 0 AND d.SKILL_CODE & p.CODE > 0)
    OR (d.SKILL_CODE & c.CODE > 0)
    OR (d.SKILL_CODE & f.CODE > 0)
ORDER BY GRADE, d.ID ;
